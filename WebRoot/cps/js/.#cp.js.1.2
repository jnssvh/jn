
function ClassFilter(domobj, cfg)	//班级选择类
{
	var self = this;
	cfg = $.jcom.initObjVal( {title:["班级"], prep:"", Class_id:0}, cfg);
	var data = [];
	$.jcom.DBCascade.call(this, domobj, "../fvs/CPB_Class_list.jsp", {}, {OrderField:"Class_id", bDesc:1}, {title:cfg.title});
	
	this.PrepareData = function (items, head)
	{
		for (var x = 0; x < items.length; x++)
		{
			items[x].item = items[x].Class_Name;
			items[x].child = null;
		}
		return items;
	};

	this.onReady = function (items)
	{
		if (cfg.Class_id > 0)
		{
			for (var x = 0; x < items.length; x++)
			{
				if (items[x].Class_id == cfg.Class_id)
				{
					self.select(x);
					return;
				}
			}
		}
		else
			self.SkipPage(1, true);
	};
}

function TermFilter(domobj, cfg)	//学期级联选择类
{
	var self = this;
	cfg = $.jcom.initObjVal( {title:["学期"], prep:"", Term_id:0}, cfg);
	var data = [];
	$.jcom.DBCascade.call(this, domobj, "../fvs/CPB_Term_class_view.jsp", {}, {OrderField:"Term_BeginTime", bDesc:1}, {title:cfg.title});
	
	this.PrepareData = function (items, head)
	{
		for (var x = 0; x < items.length; x++)
		{
			items[x].item = items[x].Term_Name;
			items[x].child = null;
		}
		return items;
	};

	this.onReady = function (items)
	{
		if (cfg.Term_id > 0)
		{
			for (var x = 0; x < items.length; x++)
			{
				if (items[x].Term_id == cfg.Term_id)
				{
					self.select(x);
					return;
				}
			}
		}
		else
			self.SkipPage(1, true);
	};
}

function TermClassFilter(domobj, cfg)	 //学期-班次 级联选择类
{
	var self = this;
	cfg = $.jcom.initObjVal( {title:["学期", "班次"], prep:"", Term_id:0, Class_id: 0}, cfg);
	var data = [];
	TermFilter.call(this, domobj, cfg);
		
	this.loadnode = function (item, node)
	{
		var fun = function(result)
		{
			var json = $.jcom.eval(result);
			if (typeof json == "string")
				return alert(json);
			var sub = -1;
			for (var x = 0; x < json.length; x++)
			{
				json[x].item = json[x].ClassCode + "-" + json[x].Class_Name;
				if (json[x].Class_id == cfg.Class_id)
					sub = x;					
			}
			item.child = json;
			self.loadnodeok(item, node);
			if (sub >= 0)
			{
				self.select(node + "," + sub);
				var obj = $("span[node='" + node + "," + sub + "']")[0];
				self.onclick(obj, item.child[sub]);
				return;
			}
			else if (json.length > 0)
				self.SkipPage(1, true);
		};
		
		var ss = node.split(",");
		if (ss.length == 1)
			$.get("../fvs/CPB_Class_list1.jsp", {SeekKey: "CPB_Class.Term_id", SeekParam: item.Term_id, GetTreeData:1, nFormat:0}, fun);
		else
			self.loadNextNode(item, node);
	};
	
	this.loadNextNode = function(item, node)
	{
	};
	
	this.onclick = function(obj, item)
	{
		var node = $(obj).attr("node");
		var ss = node.split(",");
		switch (ss.length)
		{
		case 1:		//Term
			if (item.child != null)
				self.SkipPage(1, true);
			self.onclickTerm(obj, item);
			break;
		case 2:		//Class
			self.onclickClass(obj, item);
			break;
		default:
			self.onclickOther(obj, item);
			break;
		}
	};

	this.onclickTerm = function(obj, item)
	{
	};
	
	this.onclickClass = function(obj, item)
	{
	};
	
	this.onclickOther = function (obj, item)
	{
	};
	
	this.LinkAddParam = function(item, url)
	{
		var obj = self.getsel();
		if (obj == undefined)
			return url;
		var items = self.getNodeItems(obj);
		if (items.length == 1)
			return url;
		return url + "?Class_id=" + items[1].Class_id;
	};
}

function TCSFilter(domobj, cfg)		//学期-班次-学员 级联选择类
{
	var self = this;
	cfg = $.jcom.initObjVal( {title:["学期", "班次", "学员"], prep:"", Term_id:0, Class_id: 0, Student_id: 0}, cfg);
	var data = [];
	TermClassFilter.call(this, domobj, cfg);
	self.loadNextNode = loadStudent;
	self.onclickOther = ClickOther;
	
	function loadStudent(item, node)
	{
		fun = function (data)
		{
			var json = $.jcom.eval(data);
			if (typeof json == "string")
				alert(json);
			var sub = -1;
			for (var x = 0; x < json.length; x++)
			{
				json[x].item = json[x].StdNo + "-" + json[x].StdName;
				if (json[x].RegID == cfg.Student_id)
					sub = x;					
			}
			self.loadLegend(json, node);
			if (sub >= 0)
			{
				self.select(node + "," + sub);
				var obj = $("span[node='" + node + "," + sub + "']")[0];
				self.onclick(obj, item.child[sub]);
				return;
			}
			else if (json.length > 0)
				self.SkipPage(1, true);			
		};

		  $.get("../fvs/FormStudentRpt.jsp", {GetClassStudentList:1, ClassID: item.Class_id}, fun);
	}
	
	this.onclickStudent = function (obj, item)
	{
	};

	function ClickOther(obj, item)
	{
		self.onclickStudent(obj, item);
	}
}

function TCCFilter(domobj, cfg)		//学期-班次-课程级联选择类
{
	var self = this;
	cfg = $.jcom.initObjVal( {title:["学期", "班次", "课程"], prep:"", Term_id:0, Class_id: 0, Student_id: 0}, cfg);
	var data = [];
	TermClassFilter.call(this, domobj, cfg);
	self.loadNextNode = loadCourse;
	self.onclickOther = ClickOther;
	
	function loadCourse(item, node)
	{
		fun = function (data)
		{
			var json = $.jcom.eval(data);
			if (typeof json == "string")
				alert(json);
			var sub = -1;
			for (var x = 0; x < json.Data.length; x++)
			{
				json.Data[x].item = json.Data[x].Syllabuses_date_ex + json.Data[x].Syllabuses_AP + " " + json.Data[x].Syllabuses_course_name +
				"(" + json.Data[x].Syllabuses_teacher_name + ")";
//				if (json[x].RegID == cfg.Student_id)
//					sub = x;					
			}
			self.loadLegend(json.Data, node);
			if (sub >= 0)
			{
				self.select(node + "," + sub);
				var obj = $("span[node='" + node + "," + sub + "']")[0];
				self.onclick(obj, item.child[sub]);
				return;
			}
			else if (json.Data.length > 0)
				self.SkipPage(1, true);			
		};
		$.get("../fvs/CPB_Syllabuses_EVview.jsp", {GetGridData:1, class_id: item.Class_id}, fun);
	}
	
	this.onclickCourse = function (obj, item)
	{
	};

	this.onclickLegend4 = function (obj, item)
	{
	};
	
	function ClickOther(obj, item)
	{
		var node = $(obj).attr("node");
		var ss = node.split(",");
		switch (ss.length)
		{
		case 3:
			self.onclickCourse(obj, item);
			break;
		default:
			self.onclickLegend4(obj, item);
		}
	}
}

function EvalutionPaper(domobj, cfg)		//问卷类
{
	var self = this;
	cfg = $.jcom.initObjVal( {jsp:"../fvs/CPB_Evaluate_Item_view.jsp", viewmode:1}, cfg); //viewmode - 1:设计模式, 2:表单模式，3:答卷阅读模式, 4:汇总表
	var modetag = "", tailtag = "";
	var treecfg = {itemstyle:cfg.itemstyle, expic:[]};
	var evItem, CourseItem, answerItems, answerRecord, answerAction;
	$(domobj).html("<div id=TitleBar align=center style='padding:4px;'></div><div id=TitleInfo align=center></div><div id=Content></div><div id=FootBar align=center></div>");
	if (cfg.viewmode != 1)
	{
		treecfg.rollbkcolor = false;
		treecfg.selbkcolor = false;
	}
	$.jcom.DBTree.call(this, $("#Content", domobj)[0],  cfg.jsp, {initflag:false}, treecfg);
	
	this.PrepareData = function (items, head)
	{
		if (evItem.question_action == "studentsystem/course_evaluation/question_form.jsp")
			items[items.length] = {Evaluate_item_id: 0, Evaluate_item_name: "其它意见建议", item_level:2, item_type:3, remark: ""};
		prepare(items, 0);
		return items;
	};
	
	function prepare(items, depth)
	{
		var total = 0;
		for (var x = 0; x < items.length; x++)
		{
			items[x].item = (x + 1) + "、" + items[x].Evaluate_item_name;
			items[x].style = "font-size:" + (14 - depth * 2) + "pt;font-weight:" + (900 - depth * 400) + ";padding-top:20px;";
			if (items[x].item_level == 2)
			{
				var tag = getItemInput(items[x]);
				if (items[x].item_type == 0)
				{
					total += parseInt(items[x].Evaluate_item_value);
					items[x].item += "（分值" + items[x].Evaluate_item_value + ")";
				}
				items[x].item += "<br>" + tag;
				if (items[x].remark != "")
					items[x].item += "<br>" + items[x].remark;
			}
			if (typeof items[x].child == "object")
			{
				var t = prepare(items[x].child, depth + 1);
				if (t > 0)
					items[x].item += "(满分" + t + ") ";
			}
		}
		return total;
	}
	
	function getItemInput(item)
	{
		item.item_type = parseInt(item.item_type);
		if (isNaN(item.item_type))
			item.item_type = 0;
		if (item.item_level == 1)
			return "";
		var tag = "";
		switch (cfg.viewmode * 100 + item.item_type)
		{
		case 100:		//设计模式 打分题
			return "<input disabled=true>";
		case 101:		//设计模式 单选题
			var ss = item.select_item.split(",");
			for (var x = 0; x < ss.length; x ++)
				tag += "<input type=radio disabled=true>&nbsp;" + ss[x] + "&nbsp;";
			tag = tag.replace(/\?/, "&nbsp;<input disabled=true>");
			return tag;
		case 102:		//设计模式 多选题		
			var ss = item.select_item.split(",");
			for (var x = 0; x < ss.length; x ++)
				tag += "<input type=checkbox disabled=true>&nbsp;" + ss[x] + "&nbsp;";
			tag = tag.replace(/\?/, "<input disabled=true name=other_" + item.Evaluate_item_id + ">");
			return tag;
		case 103:		//设计模式 问题题
			return "<textarea style=width:80% rows=6 disabled=true></textarea>";
		case 200:		//表单模式 打分题
			return "<input name=item_" + item.Evaluate_item_id + " value='" + getDetailInputValue(item.Evaluate_item_id, answerRecord, "score") + "'>";
		case 201:		//表单模式 单选题
			var ss = item.select_item.split(",");
			var val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "score");
			for (var x = 0; x < ss.length; x ++)
			{
				var c = "";
				if (val == (x + 1))
						c = "checked=true ";
				tag += "<input type=radio " + c + "name=item_" + item.Evaluate_item_id + " value=" + (x + 1) + ">&nbsp;" + ss[x] + "&nbsp;";
			}
			val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			tag = tag.replace(/\?/, "&nbsp;<input name=other_" + item.Evaluate_item_id + " value='" + val + "'>");
			return tag;
		case 202:		//表单模式 多选题
			var ss = item.select_item.split(",");
			var val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "score");
			for (var x = 0; x < ss.length; x ++)
			{
				var c = "";
				if ((val & (1 << x)) > 0)
						c = "checked=true ";
				tag += "<input type=checkbox " + c + "name=item_" + item.Evaluate_item_id + " value=" + (1 << x) + ">&nbsp;" + ss[x] + "&nbsp;";
			}
			val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			tag = tag.replace(/\?/, "<input name=other_" + item.Evaluate_item_id + " value='" + val + "'>");
			return tag;
		case 203:		//表单模式 问题题
			if (item.Evaluate_item_id == 0)
				tag = $.trim(answerRecord.Main.feedback);
			else
				tag = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			return "<textarea style=width:80% rows=6 name=item_" + item.Evaluate_item_id + ">" + tag + "</textarea>";
		case 300:		//答卷模式 打分题
			return "<input readonly=true value='" + getDetailInputValue(item.Evaluate_item_id, answerRecord, "score") + "'>";
		case 301:		//答卷模式 单选题
			var ss = item.select_item.split(",");
			var val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "score");
			for (var x = 0; x < ss.length; x ++)
			{
				var c = "disabled=true ";
				if (val == (x + 1))
						c = "checked=true ";
				tag += "<input type=radio " + c + ">&nbsp;" + ss[x] + "&nbsp;";
			}
			val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			tag = tag.replace(/\?/, "&nbsp;<input readonly=true value='" + val + "'>");
			return tag;
		case 302:		//答卷模式 多选题
			var ss = item.select_item.split(",");
			var val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "score");
			if (val > 0)
			{
				for (var x = 0; x < ss.length; x ++)
				{
					var c = "disabled=true ";
					if ((val & (1 << x)) > 0)
							c = "checked=true ";
					tag += "<input type=checkbox " + c + ">&nbsp;" + ss[x] + "&nbsp;";
				}
				val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
				tag = tag.replace(/\?/, "<input readonly=true value='" + val + "'>");
			}
			else
			{
				val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
				var op = val.split(",");
				for (var x = 0; x < ss.length; x ++)
				{
					var c = $.jcom.getItemImg("#9744", "font-size:24px;color:gray;");
					for (var y = 0; y < op.length; y++)
					{
						if (parseInt(op[y]) == x + 1)
							c = $.jcom.getItemImg("#9745", "font-size:24px;color:black;");
					}
					tag += c + "&nbsp;" + ss[x] + "&nbsp;";
				}
		
			}
			val = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			tag = tag.replace(/\?/, "<input readonly=true value='" + val + "'>");
			return tag;
		case 303:		//答卷模式 问题题
			if (item.Evaluate_item_id == 0)
				tag = $.trim(answerRecord.Main.feedback);
			else
				tag = getDetailInputValue(item.Evaluate_item_id, answerRecord, "Evalute_opinion");
			return "<textarea readonly=true style=width:80% rows=6>" + tag + "</textarea>";
		case 400:		//汇总模式 打分题
			var cnt = 0, total = 0, min = 1000, max = 0;
			for (var x = 0; x < answerItems.Detail.length; x++)
			{
				if (answerItems.Detail[x].Evaluate_item_id == item.Evaluate_item_id)
				{
					cnt ++;
					total += answerItems.Detail[x].score;
					if (answerItems.Detail[x].score < min)
						min = answerItems.Detail[x].score;
					if (answerItems.Detail[x].score > max)
						max = answerItems.Detail[x].score;
				}
			}
			if (cnt == 0)
				return "答题数量:0";
			return "平均分:" + (total / cnt).toFixed(2) + "(" + total + "/" + cnt + "), 最高分:" + max + ", 最低分:" + min;
		case 401:		//汇总模式 单选题
			var cnt = 0;
			var ss = item.select_item.split(",");
			var result = [];
			for (var x = 0; x < ss.length + 1; x++)
				result[x] = 0;
			for (var x = 0; x < answerItems.Detail.length; x++)
			{
				if (answerItems.Detail[x].Evaluate_item_id == item.Evaluate_item_id)
				{
					cnt ++;
					result[answerItems.Detail[x].score] ++;
				}
			}
			for (var x = 0; x < ss.length; x ++)
			{
				var p = "";
				if (cnt > 0)
					p = "-" + (result[x + 1] * 100 / cnt).toFixed(1) + "%";
				tag += $.jcom.getItemImg("#9673", "font-size:24px;color:gray;") + "&nbsp;" + ss[x] + "&nbsp;:" + result[x + 1] + p + "<br>";
			}
			return tag;			
		case 402:		//汇总模式  多选题
			var cnt = 0;
			var ss = item.select_item.split(",");
			var result = [];
			for (var x = 0; x < ss.length + 1; x++)
				result[x] = 0;
			for (var x = 0; x < answerItems.Detail.length; x++)
			{
				if (answerItems.Detail[x].Evaluate_item_id == item.Evaluate_item_id)
				{
					cnt ++;
					if (answerItems.Detail[x].score == 0)
					{
						var op = answerItems.Detail[x].Evalute_opinion.split(",");
						for (var y = 0; y < op.length; y++)
							result[parseInt(op[y])] ++;
					}
					else
					{
						for (var y = 0; y < ss.length; y++)
						{
							if ((answerItems.Detail[x].score & (1 << y)) > 0)
								result[y] ++;								
						}
					}
				}
			}
			for (var x = 0; x < ss.length; x ++)
			{
				var p = "";
				if (cnt > 0)
					p = "-" + (result[x + 1] * 100 / cnt).toFixed(1) + "%";
				tag += $.jcom.getItemImg("#9745", "font-size:20px;color:gray;") + "&nbsp;" + ss[x] + "&nbsp;:" + result[x + 1] + p + "<br>";
			}
			return tag;
		case 403:		//汇总模式 问题题
			var cnt = 0;
			if (item.Evaluate_item_id == 0)
			{
				for (var x = 0; x < answerItems.Main.length; x++)
				{
					var note = $.trim(answerItems.Main[x].feedback);
					if ((note != "") && (note != "无") && (note != "无。") && (note != "空"))
					{
						cnt ++;
						tag += cnt + "、" + note + "<br>";
					}
				}	
			}
			else
			{
				for (var x = 0; x < answerItems.Detail.length; x++)
				{
					if (answerItems.Detail[x].Evaluate_item_id == item.Evaluate_item_id)
					{
						var note = $.trim(answerItems.Detail[x].Evalute_opinion);
						if ((note != "") && (note != "无") && (note != "无。") && (note != "空"))
						{
							cnt ++;
							tag += cnt + "、" + note + "<br>";
						}
					}
				}
			}
			return "<div style=font-size:12pt;font-weight:100>" + tag + "</div>";
		}
	}
	
	function getDetailInputValue(itemid, answer, field)
	{
		if (typeof answer != "object")
			return "";
		for (var x = 0; x < answer.Detail.length; x++)
		{
			if (answer.Detail[x].Evaluate_item_id == itemid)
				return answer.Detail[x][field];
		}
		return "";
	}
	
	this.loadPaper = function(item)		//方法:加载空白问卷，传入问卷记录或问卷编号
	{
		if (typeof item == "object")
		{
			evItem = item;
			$("#TitleBar", domobj).html("<h1>" + item.evaluate_name + "</h1>");
			self.config({URLParam:"?Evaluate_id=" + item.evaluate_id});
			self.reload();
			return;
		}
		var fun = function (data)
		{
			var json = $.jcom.eval(data);
			if (typeof json == "string")
				alert(json);
			json.evaluate_id = item;
			self.loadPaper(json);
		};
		if ((typeof evItem == "object") && (evItem.evalute_id == item))
			self.loadPaper(evItem);
		else
			$.get("../fvs/CPB_Evaluate_form.jsp", {getrecord:1, DataID: item}, fun);		
	}
	
	this.loadCourseForm = function (course, answer, act)		//方法:加载与课程关联的问卷，供学员填写,传入课程记录和答卷记录及提交地址
	{
		cfg.viewmode = 2;
		courseItem = course;
		answerRecord = answer;
		answerAction = act;
		var title = "<h2 align=center>" + course.term_id_ex + "&nbsp;" + course.class_id_ex + "</h2><h2>" + course.item + "</h2>";
		if (typeof answerRecord == "object")
			title += "<h3 align=left>总分:" + answer.Main.score + ", 提交时间:" + $.jcom.GetDateTimeString(answer.Main.submit_time, 2) + "</h3>";
				
		$("#TitleInfo", domobj).html(title);
		$("#SubmitAnswer", domobj).off("click", SubmitForm);
		$("#FootBar", domobj).html("<input id=SubmitAnswer type=button value=提交>");
		$("#SubmitAnswer", domobj).on("click", SubmitForm);
		self.loadPaper(course.evaluate_id);
	};

	function SubmitForm()
	{
		$("[id='FormErrHint']", domobj).remove();
		var items = self.getdata();
		var instance_id = 0;
		if (typeof answerRecord == "object")
			instance_id = answerRecord.Main.instance_id;
		var result = {cnt:0, Detail:[{instance_id:instance_id, Syllabuses_id:courseItem.Syllabuses_id, evaluate_id:courseItem.evaluate_id, Total:0, feedback:""}]};
		getFormDetail(items, result);
		if (result.cnt > 0)
			return alert("未完成答卷，有" + result.cnt + "项内容未填写或填写错误，请检查。");
		$("#SubmitAnswer", domobj).attr("disabled", true);
		$("#SubmitAnswer", domobj).val("正在提交...");
		$.jcom.submit(answerAction, result.Detail, {fnReady:SaveFormOK});
	}
	
	function SaveFormOK(data)
	{
		alert(data);
		if (data == "OK:提交答卷成功。")
			location.reload();
	}
	
	function getFormDetail(items, result)
	{
		for (var x = 0; x < items.length; x++)
		{
			if (items[x].item_level == 2)
			{
				var obj = $("[name='item_" + items[x].Evaluate_item_id + "']", domobj);
				var val = 0, text = "";
				switch (items[x].item_type)
				{
				case 0:		//打分题
					val = parseInt(obj.val());
					if (isNaN(val))
						FormItemError(obj, result);
					result.Detail[0].Total += val;
					break;
				case 1:		//单选题
					for (var y = 0; y < obj.length; y++)
					{
						if (obj[y].checked)
							val = obj[y].value;
					}
					obj = $("[name='other_" + items[x].Evaluate_item_id + "']", domobj);
					if (obj.length > 0)
						text = obj.val();
					if (val == 0)
						FormItemError(obj.last(), result);
					break;
				case 2:		//多选题
					for (var y = 0; y < obj.length; y++)
					{
						if (obj[y].checked)
							val += obj[y].value;
					}
					obj = $("[name='other_" + items[x].Evaluate_item_id + "']", domobj);
					if (obj.length > 0)
						text = obj.val();
					if (val == 0)
						FormItemError(obj.last(), result);
					break;
				case 3:		//问答题
					text = obj.val();
					break;
				}
				if (items[x].Evaluate_item_id == 0)
					result.Detail[0].feedback = text;
				else
					result.Detail[result.Detail.length] = {Evaluate_item_id:items[x].Evaluate_item_id, score: val, Evalute_opinion:""};
	
			}
			if (typeof items[x].child == "object")
				getFormDetail(items[x].child, result);
		}		
	}
	
	function FormItemError(obj, result)
	{
		obj.after("<span id=FormErrHint style=color:red>&nbsp;请答题！</span>");
		result.cnt ++;
	}
	
	this.loadCourseAnswer = function (course, answer)		//方法:加载一条评课记录，传入评课主表记录和答案记录
	{
		cfg.viewmode = 3;
		courseItem = course;
		answerRecord = answer;
		$("#TitleInfo", domobj).html("<h1>答卷</h1><h2 align=center>" + course.term_id_ex + "&nbsp;" + course.class_id_ex + "</h2><h2>" + 
			course.item + "</h2><h3 align=left>总分:" + answer.Main.score + ", 提交时间:" + $.jcom.GetDateTimeString(answer.Main.submit_time, 2) + "</h3>");
		self.loadPaper(course.evaluate_id);
	};
	
	
	this.loadCourseRpt = function (course, answers)	//方法：加载课程的评课汇总，传入课程记录和答卷记录集
	{
		courseItem = course;
		answerItems = answers;
		cfg.viewmode = 4;
		$("#TitleInfo", domobj).html("<h1>汇总表</h1><h2 align=center>" + course.term_id_ex + "&nbsp;" + course.class_id_ex + "</h2><h2>" + course.item +
			"</h2><p align=left>答卷份数:" + answerItems.Main.length + ", 本班人数:" + answerItems.Users.length + "<p align=left>" + getTotal() +
			"</p><p align=left>未评课人员:" + getAbsence(answerItems.Users, answerItems.Main) + "</p>");
		self.loadPaper(course.evaluate_id);
	};
	
	function getAbsence(Users, Mains)
	{
		for (var x = 0; x < Users.length; x++)
		{
			Users[x].flag = 0;
		}
		
		for (var x = 0; x < Mains.length; x++)
		{
			for (var y = 0; y < Users.length; y++)
			{
				if (Mains[x].submit_man == Users[y].MemberID)
					Users[y].flag = 1;
			}
		}
		var tag = "", cnt = 0;
			
		for (var x = 0; x < Users.length; x++)
		{
			if (Users[x].flag == 0)
			{
				tag += ",&nbsp" + Users[x].StdName;
				cnt ++;
			}
		}
		return "共" + cnt + "人" + tag;
	}
	
	function getTotal()
	{
		var cnt = 0, total = 0, min = 1000, max = 0;
		for (var x = 0; x < answerItems.Main.length; x++)
		{
			cnt ++;
			total += answerItems.Main[x].score;
			if (answerItems.Main[x].score < min)
				min = answerItems.Main[x].score;
			if (answerItems.Main[x].score > max)
				max = answerItems.Main[x].score;
		}
		if (cnt == 0)
			return "答题数量:0";
		return "总平均分:" + (total / cnt).toFixed(2) + "(" + total + "/" + cnt + "), 最高分:" + max + ", 最低分:" + min + ", 时间段:" + 
		$.jcom.GetDateTimeString(answerItems.Main[0].submit_time, 9) + " ~ " + $.jcom.GetDateTimeString(answerItems.Main[answerItems.Main.length - 1].submit_time, 9);
		
	}
}